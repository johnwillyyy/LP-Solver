{"ast":null,"code":"var _jsxFileName = \"/home/john/OR-Labs/LP Solver/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { loadPyodide } from \"pyodide\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PythonExecutor() {\n  _s();\n  const [pyodide, setPyodide] = useState(null);\n  const [output, setOutput] = useState(\"\");\n  const [inputValue, setInputValue] = useState(5);\n  useEffect(() => {\n    const initPyodide = async () => {\n      let py = await loadPyodide();\n      setPyodide(py);\n\n      // Load all Python files\n      await loadPythonFiles(py, [\"utils.py\", \"helper.py\", \"main.py\"]);\n    };\n    initPyodide();\n  }, []);\n\n  // Function to load multiple Python files\n  const loadPythonFiles = async (pyodide, files) => {\n    for (const file of files) {\n      const response = await fetch(`/${file}`);\n      const code = await response.text();\n      pyodide.runPython(code);\n    }\n  };\n  const runPython = async () => {\n    if (!pyodide) return;\n\n    // Call the function from main.py\n    const result = pyodide.runPython(`compute(${inputValue})`);\n    setOutput(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: runPython,\n      children: \"Compute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Output: \", output]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(PythonExecutor, \"fm833nhEkz2tsmCqZ2HVoyoXtdk=\");\n_c = PythonExecutor;\nexport default PythonExecutor;\nvar _c;\n$RefreshReg$(_c, \"PythonExecutor\");","map":{"version":3,"names":["useEffect","useState","loadPyodide","jsxDEV","_jsxDEV","PythonExecutor","_s","pyodide","setPyodide","output","setOutput","inputValue","setInputValue","initPyodide","py","loadPythonFiles","files","file","response","fetch","code","text","runPython","result","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/john/OR-Labs/LP Solver/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { loadPyodide } from \"pyodide\";\n\nfunction PythonExecutor() {\n    const [pyodide, setPyodide] = useState(null);\n    const [output, setOutput] = useState(\"\");\n    const [inputValue, setInputValue] = useState(5);\n\n    useEffect(() => {\n        const initPyodide = async () => {\n            let py = await loadPyodide();\n            setPyodide(py);\n\n            // Load all Python files\n            await loadPythonFiles(py, [\"utils.py\", \"helper.py\", \"main.py\"]);\n        };\n        initPyodide();\n    }, []);\n\n    // Function to load multiple Python files\n    const loadPythonFiles = async (pyodide, files) => {\n        for (const file of files) {\n            const response = await fetch(`/${file}`);\n            const code = await response.text();\n            pyodide.runPython(code);\n        }\n    };\n\n    const runPython = async () => {\n        if (!pyodide) return;\n\n        // Call the function from main.py\n        const result = pyodide.runPython(`compute(${inputValue})`);\n        setOutput(result);\n    };\n\n    return (\n        <div>\n            <input\n                type=\"number\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n            />\n            <button onClick={runPython}>Compute</button>\n            <p>Output: {output}</p>\n        </div>\n    );\n}\n\nexport default PythonExecutor;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACZ,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIC,EAAE,GAAG,MAAMZ,WAAW,CAAC,CAAC;MAC5BM,UAAU,CAACM,EAAE,CAAC;;MAEd;MACA,MAAMC,eAAe,CAACD,EAAE,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IACnE,CAAC;IACDD,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,eAAe,GAAG,MAAAA,CAAOR,OAAO,EAAES,KAAK,KAAK;IAC9C,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;MACtB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAIF,IAAI,EAAE,CAAC;MACxC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCd,OAAO,CAACe,SAAS,CAACF,IAAI,CAAC;IAC3B;EACJ,CAAC;EAED,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI,CAACf,OAAO,EAAE;;IAEd;IACA,MAAMgB,MAAM,GAAGhB,OAAO,CAACe,SAAS,CAAC,WAAWX,UAAU,GAAG,CAAC;IAC1DD,SAAS,CAACa,MAAM,CAAC;EACrB,CAAC;EAED,oBACInB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MACIqB,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEf,UAAW;MAClBgB,QAAQ,EAAGC,CAAC,IAAKhB,aAAa,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACF7B,OAAA;MAAQ8B,OAAO,EAAEZ,SAAU;MAAAE,QAAA,EAAC;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5C7B,OAAA;MAAAoB,QAAA,GAAG,UAAQ,EAACf,MAAM;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEd;AAAC3B,EAAA,CA5CQD,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AA8CvB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}